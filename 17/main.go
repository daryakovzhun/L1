package main

import "fmt"

//  Реализовать бинарный поиск встроенными методами языка.

//  Сложность алгоритма бинарного поиска по времени выполнения O(logN) (так как мы уменьшаем срез массива на 2 на каждой
//  итерации и проверяем только 1 элемент), и O(1) по памяти

func BinarySearch(a []int, target int) (int, bool) {
	left, right := 0, len(a)-1 //  задаем левую и правую границы
	for left <= right {        //  ищем элемет в массиве пока левая граница не станет равной правой
		midle_idx := (left + right) / 2 //  находим индекс элемента который находится посередине
		if a[midle_idx] < target {      //  если элемент посередине меньше искомого элемента, то смещаем левую границу
			left = midle_idx + 1
		} else if a[midle_idx] > target { //  если элемент посередине больше искомого элемента, то смещаем правую границу
			right = midle_idx - 1
		} else {
			return midle_idx, true //  иначе элемент найден
		}
	}
	return 0, false //  элемента нет
}

func main() {
	//  задаем отсортированный массив
	arr := []int{-45, -21, 0, 12, 66, 72, 99, 104, 111}
	fmt.Println(BinarySearch(arr, -21)) //  выводим на экран результат функции бинарного поиска
}
